@page "/newuser"
@using BlazorAuth.Commands
@using BlazorAuth.Enum
@using BlazorInputMask
@rendermode InteractiveServer

<section class="vh-100">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-8 col-xl-8">
                <div class="card text-black" style="border-radius: 25px;">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-3 col-xl-10 order-2 order-lg-1">
                                <div class="text-center">
                                    <img src="img/logo-duett.png"
                                         class="img-fluid" alt="Sample image">
                                </div>
                                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Cadastrar-se</p>

                                <EditForm Model="@UserModel" FormName="NovoUsuario" OnValidSubmit="@HandleRegister">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label">Nome:</label>
                                            <InputText @bind-Value="@UserModel.Name" class="form-control"></InputText>
                                            <ValidationMessage For="@(() => UserModel.Name)"></ValidationMessage>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-envelope fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label">Email:</label>
                                            <InputText @bind-Value="@UserModel.Email" class="form-control"></InputText>
                                            <ValidationMessage For="@(() => UserModel.Email)"></ValidationMessage>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label">Senha:</label>
                                            <InputText type="password" @bind-Value="@UserModel.PasswordHashed" class="form-control"></InputText>
                                            <ValidationMessage For="@(() => UserModel.PasswordHashed)"></ValidationMessage>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-key fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label">CPF:</label>
                                            
                                            <InputMask @bind-Value="@UserModel.Cpf" class="form-control" data-mask="000.000.000-00" OnChanged="OnMaskChanged" validateOnKeyPress="false" />
                                            <ValidationMessage For="@(() => UserModel.Cpf)"></ValidationMessage>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-key fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <label class="form-label">Perfil do Usuário:</label>
                                            <InputSelect class="form-control" @bind-Value="@UserModel.Role" required>
                                                <option value="">Selecione um perfil</option>
                                                @foreach (var role in Enum.GetValues(typeof(AccessLevel)))
                                                {
                                                    <option value="@role">@role</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => UserModel.Role)"></ValidationMessage>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        <button type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg">Cadastrar</button>
                                    </div>

                                </EditForm>

                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="error-message" style="color: red">
                                        Erro: @errorMessage
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    public UserCommand UserModel { get; set; } = new UserCommand();
    private string errorMessage;
    private List<Error> errors;
    string rawValue { get; set; }

    private async Task HandleRegister()
    {
        errorMessage = string.Empty;
        errors = null;
        var response = await UserService.CreateAsync(UserModel);

        if (response.Success)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = response.Message!;
        }
    }

    private void OnMaskChanged(InputChanged input)
    {
        rawValue = input.unMaskedValue;
        UserModel.Cpf = rawValue;
    }
}